# DataSource configuration for the test profile (using H2 in-memory database)
quarkus.datasource.db-kind=h2
quarkus.datasource.jdbc.url=jdbc:h2:mem:testdb;DB_CLOSE_DELAY=-1
quarkus.datasource.username=sa
quarkus.datasource.password=sa

# Hibernate ORM settings for the test profile
# This ensures the schema is created and import.sql is run for tests
quarkus.hibernate-orm.database.generation=drop-and-create
quarkus.hibernate-orm.sql-load-script=import.sql
quarkus.hibernate-orm.log.sql=false

# For DB health check
db.host=localhost
db.port=0

# Elytron security configuration for username/password against a database table
#quarkus.security.jdbc.enabled=true
#quarkus.security.jdbc.principal-query.sql=SELECT u.password, u.role FROM quarkus_user u WHERE u.username=?
#quarkus.security.jdbc.principal-query.clear-password-mapper.enabled=true
#quarkus.security.jdbc.principal-query.clear-password-mapper.password-index=1
#quarkus.security.jdbc.principal-query.attribute-mappings.0.index=2
#quarkus.security.jdbc.principal-query.attribute-mappings.0.to=groups

# Enable OpenID Connect security
quarkus.oidc.enabled=true
quarkus.oidc.auth-server-url=http://localhost:8180/realms/quarkus-realm
quarkus.oidc.client-id=quarkus-client
quarkus.oidc.credentials.secret=testsecret
#quarkus.oidc.token.issuer=quarkus-realm

# CORS to allow frontend communication
quarkus.http.cors=true
quarkus.http.cors.origins=http://localhost:8080,http://localhost:8081,http://localhost:8180
quarkus.http.cors.methods=GET,POST,PUT,DELETE,OPTIONS
quarkus.http.cors.headers=Authorization,Content-Type

# JWT verification and issuer
mp.jwt.verify.publickey.location=${quarkus.oidc.auth-server-url}/protocol/openid-connect/certs
mp.jwt.verify.issuer=${quarkus.oidc.auth-server-url}

# Allow GET access for customers to both user and admin
quarkus.http.auth.permission.customers-read.paths=/customers/*
quarkus.http.auth.permission.customers-read.methods=GET
quarkus.http.auth.permission.customers-read.policy=customers-read-policy
quarkus.http.auth.policy.customers-read-policy.roles-allowed=user,admin

# Restrict POST, PUT, DELETE for customers to admin only
quarkus.http.auth.permission.customers-write.paths=/customers/*
quarkus.http.auth.permission.customers-write.methods=POST,PUT,DELETE
quarkus.http.auth.permission.customers-write.policy=customers-write-policy
quarkus.http.auth.policy.customers-write-policy.roles-allowed=admin

# Allow GET access to both user and admin for orders
quarkus.http.auth.permission.orders-read.paths=/orders/*
quarkus.http.auth.permission.orders-read.methods=GET
quarkus.http.auth.permission.orders-read.policy=order-read-policy
quarkus.http.auth.policy.order-read-policy.roles-allowed=user,admin

# Restrict POST, PUT, DELETE access on orders to admin only
quarkus.http.auth.permission.orders-write.paths=/orders/*
quarkus.http.auth.permission.orders-write.methods=POST,PUT,DELETE
quarkus.http.auth.permission.orders-write.policy=order-write-policy
quarkus.http.auth.policy.order-write-policy.roles-allowed=admin

# HTTPS Certificate and Key files
quarkus.tls.key-store.pem.0.cert=cert.pem
quarkus.tls.key-store.pem.0.key=key.pem
quarkus.http.insecure-requests=redirect
quarkus.http.ssl-port=8443

quarkus.oidc.tls.verification=none
