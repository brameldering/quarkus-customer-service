# DataSource configuration for the test profile (using H2 in-memory database)
quarkus.datasource.db-kind=h2
quarkus.datasource.jdbc.url=jdbc:h2:mem:testdb;DB_CLOSE_DELAY=-1
quarkus.datasource.username=sa
quarkus.datasource.password=sa

# Hibernate ORM settings for the test profile
# This ensures the schema is created and import.sql is run for tests
quarkus.hibernate-orm.database.generation=drop-and-create
quarkus.hibernate-orm.sql-load-script=import.sql
quarkus.hibernate-orm.log.sql=true

# Security configuration for the test profile (should be the same as main)
#quarkus.security.jdbc.enabled=true
#quarkus.security.jdbc.principal-query.sql=SELECT u.password, u.role FROM quarkus_user u WHERE u.username=?
#quarkus.security.jdbc.principal-query.clear-password-mapper.enabled=true
#quarkus.security.jdbc.principal-query.clear-password-mapper.password-index=1
#quarkus.security.jdbc.principal-query.attribute-mappings.0.index=2
#quarkus.security.jdbc.principal-query.attribute-mappings.0.to=groups

keycloak.url=http://localhost:8180
#quarkus.oidc.enabled=true
# Following are needed for Quarkus to use an existing keycloak instance not not to start a temporary one
quarkus.keycloak.devservices.enabled=false
quarkus.oidc.auth-server-url=${keycloak.url}/realms/quarkus-realm
quarkus.oidc.client-id=quarkus-client
quarkus.oidc.credentials.secret=gaFiQ4gUDZtjmUbHm61QYrZkelapdNGB
#quarkus.keycloak.policy-enforcer.enable=true
#quarkus.http.cors=true

# MP-JWT Config
mp.jwt.verify.publickey.location=${keycloak.url}/realms/quarkus-realm/protocol/openid-connect/certs
mp.jwt.verify.issuer=${keycloak.url}/realms/quarkus-realm
quarkus.smallrye-jwt.realmName=quarkus-realm